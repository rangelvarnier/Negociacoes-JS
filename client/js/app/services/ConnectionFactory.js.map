{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","forEach","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,uCAAOe,OAAP,CAAe,iBAAS;AACpBV,sDAAkBW,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iCAFD;AAGH,6BAJD;;AAMAT,wCAAYU,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAACjB,UAAL,EAAiB;AACbA,iDAAac,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAf,4CAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYY,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAY,uBAAZ;AACAf,uCAAOQ,EAAEC,MAAF,CAASO,KAAhB;AACH,6BAHD;AAIH,yBA1BM,CAAP;AA2BH;;;kDAEoBtB,U,EAAY;AAC7B,4BAAIA,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqC3B,MAArC,CAAJ,EAAkD;AAC9CG,uCAAWyB,iBAAX,CAA6B5B,MAA7B;AACH;AACDG,mCAAW0B,iBAAX,CAA6B7B,MAA7B,EAAqC;AACjC8B,2CAAe;AADkB,yBAArC;AAGH;;;sDAEwB;AACrB,4BAAI3B,UAAJ,EAAgB;AACZ;AACA;AACAC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 1;\nconst dbName = 'aluraframe';\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error('Não é possivel instanciar ConnectionFactory');\n    }\n\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                stores.forEach(store => {\n                    ConnectionFactory._createStores(e.target.result);\n                })\n            };\n\n            openRequest.onsuccess = e => {\n\n                if (!connection) {\n                    connection = e.target.result;\n                    //monkey pathing parecido com @Overide do java\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log('Erro ao abrir conexão');\n                reject(e.target.error);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n        if (connection.objectStoreNames.contains(stores)) {\n            connection.deleteObjectStore(stores);\n        }\n        connection.createObjectStore(stores, {\n            autoIncrement: true\n        });\n    }\n\n    static closeConnection() {\n        if (connection) {\n            // referencia o close à connection\n            //Reflect.apply(close, connection, []);\n            close();\n            connection = null;\n        }\n    }\n}\n"]}