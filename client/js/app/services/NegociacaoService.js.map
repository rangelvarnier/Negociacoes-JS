{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","Negociacao","ConnectionFactory","NegociacaoDao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","map","Date","dado","data","quantidade","valor","catch","Error","erro","resolve","reject","get","console","log","objeto","callBack","negociacao","getConnection","conexao","dao","adiciona","connection","listaTodos","apagarTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {Negociacao} from '../models/Negociacao';\nimport {ConnectionFactory} from \"./ConnectionFactory\";\nimport {NegociacaoDao} from \"../dao/NegociacaoDao\";\n\nexport class NegociacaoService {\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes() {\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), [])\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor));\n\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    obterNegociacoesDaSemana() {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto =>\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possivel obter as negociaçoes da semana');\n                });\n        });\n    }\n\n    obterNegociacoesDaSemanaAnterior(callBack) {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto =>\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possivel obter as negociaçoes da semana anterior');\n                });\n        });\n    }\n\n    obterNegociacoesDaSemanaRetrasada(callBack) {\n        return new Promise((resolve, reject) => {\n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto =>\n                        new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possivel obter as negociaçoes da semana retrasada');\n                });\n        });\n    }\n\n    cadastrar(negociacao){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociacao adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possivel cadastra a negociação');\n            });\n    }\n\n    lista(){\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possivel listar as negociações');\n            });\n    }\n\n    apaga(){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.apagarTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possivel apagar as negociações');\n            });\n    }\n\n    importa(listaAtual){\n        return this.obterNegociacoes()\n            .then(negociacoes => negociacoes.filter(negociacao =>\n                !listaAtual.some(negociacaoExistente =>\n                JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))))\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('')\n            })\n    }\n}\n"]}